"""Generated test for checking pynos based actions
"""
import xml.etree.ElementTree as ET
from st2tests.base import BaseActionTestCase
from {{ action_name }} import {{ action_name }}

__all__ = [
    '{{ class_name }}'
]


class MockCallback(object):  # pylint:disable=too-few-public-methods
    """Class to hold mock callback and result
    """
    returned_data = None

    def callback(self, call, **kwargs):  # pylint:disable=unused-argument
        """Mock callback method
        """
        xml_result = ET.tostring(call)
        self.returned_data = xml_result


class {{ class_name }}(BaseActionTestCase):
    """Test holder class
    """
    action_cls = {{ action_name }}

    def test_action(self):
        """Generated test to check action
        """
        action = self.get_action_instance()
        mock_callback = MockCallback()
        kwargs = {
            {% for parameter, parameter_value in parameters.iteritems() %}'{{ parameter }}': {% if parameter_value.value == True or parameter_value.value == False %}{{ parameter_value.value }}{% else %}'{{ parameter_value.value }}'{% endif %},
            {% endfor %}'test': True,
            'callback': mock_callback.callback
        }

        action.run(**kwargs)

        expected_xml = (
{% for expected_result in expected_results %}            '{{ expected_result }}'
{% endfor %}        )

        self.assertTrue(expected_xml, mock_callback.returned_data)

